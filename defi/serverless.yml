service: defillama

package:
  individually: true

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 250
  region: eu-central-1
  endpointType: REGIONAL # Set to regional because the api gateway will be behind a cloudfront distribution
  stage: dev # Default to dev if no stage is specified
  tracing: # Enable X-Ray tracing (debugging)
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: Allow # X-Ray permissions
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
      Resource:
        - "Fn::GetAtt": [DynamoTable, Arn]
    - Effect: Allow # Lambda logs on cloudwatch
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - "Fn::Join":
            - ":"
            - - "arn:aws:logs"
              - Ref: "AWS::Region"
              - Ref: "AWS::AccountId"
              - "log-group:/aws/lambda/*:*:*"
    # For warm-up functions
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:*Object*"
      Resource: "*"
  environment:
    ETHEREUM_RPC: ${file(./env.js):ETHEREUM_RPC}
    BSC_RPC: ${file(./env.js):BSC_RPC}
    POLYGON_RPC: ${file(./env.js):POLYGON_RPC}
    FANTOM_RPC: ${file(./env.js):FANTOM_RPC}
    ARBITRUM_RPC: ${file(./env.js):ARBITRUM_RPC}
    OPTIMISM_RPC: ${file(./env.js):OPTIMISM_RPC}
    XDAI_RPC: ${file(./env.js):XDAI_RPC}
    HARMONY_RPC: ${file(./env.js):HARMONY_RPC}
    MOONRIVER_RPC: ${file(./env.js):MOONRIVER_RPC}
    KLAYTN_RPC: "https://public-node-api.klaytnapi.com/v1/cypress"
    OUTDATED_WEBHOOK: ${file(./env.js):OUTDATED_WEBHOOK}
    SPIKE_WEBHOOK: ${file(./env.js):SPIKE_WEBHOOK}
    CLOUDWATCH_WEBHOOK_URL: ${file(./env.js):CLOUDWATCH_WEBHOOK_URL}
    DROPS_WEBHOOK: ${file(./env.js):DROPS_WEBHOOK}
    EULER_MONGODB_APIKEY: ${file(./env.js):EULER_MONGODB_APIKEY}
    DEFILLAMA_SDK_MUTED: true
    tableName: ${self:custom.tableName}
    stage: ${self:custom.stage}

custom:
  stage: ${opt:stage, self:provider.stage}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: "npm"
    excludeFiles: src/**/*.test.ts
  prune:
    automatic: true
    number: 5 # Number of versions to keep
  tableName: prod-table
  domainMap:
    prod:
      domain: api.llama.fi
      certificateArn: "arn:aws:acm:us-east-1:856461987125:certificate/b4209013-30a6-417e-847e-6e630c3e77fe"
      hostedZone: llama.fi
    dev:
      domain: staging-api.llama.fi
      certificateArn: "arn:aws:acm:us-east-1:856461987125:certificate/b4209013-30a6-417e-847e-6e630c3e77fe"
      hostedZone: llama.fi
  domain: ${self:custom.domainMap.${self:custom.stage}.domain}
  certificateArn: ${self:custom.domainMap.${self:custom.stage}.certificateArn}
  hostedZone: ${self:custom.domainMap.${self:custom.stage}.hostedZone}

functions:
  fallback:
    handler: src/fallback.default
    events:
      - http:
          path: /{params+}
          method: any
  chart:
    handler: src/getChart.default
    timeout: 60
    memorySize: 2000
    events:
      - http:
          path: charts
          method: get
      - http:
          path: charts/{chain}
          method: get
  protocols:
    handler: src/getProtocols.default
    timeout: 90
    memorySize: 2000
    events:
      - http:
          path: protocols
          method: get
  protocol:
    handler: src/getProtocol.default
    timeout: 120
    memorySize: 2000
    events:
      - http:
          path: protocol/{protocol}
          method: get
  updatedProtocol:
    handler: src/getUpdatedProtocol.default
    timeout: 120
    memorySize: 2000
    events:
      - http:
          path: updatedProtocol/{protocol}
          method: get
  protocolTvl:
    handler: src/getProtocolTvl.default
    events:
      - http:
          path: tvl/{protocol}
          method: get
  coins:
    handler: src/getCoins.default
    timeout: 60
    memorySize: 2000
    events:
      - http:
          path: coins
          method: post
  chains:
    handler: src/getChains.default
    timeout: 60
    memorySize: 2000
    events:
      - http:
          path: chains
          method: get
  langs:
    handler: src/getLangs.default
    timeout: 600
    memorySize: 2000
    events:
      - http:
          path: langs
          method: get
  oracles:
    handler: src/getOracles.default
    timeout: 600
    memorySize: 2000
    events:
      - http:
          path: oracles
          method: get
  forks:
    handler: src/getForks.default
    timeout: 600
    memorySize: 2000
    events:
      - http:
          path: forks
          method: get
  dataset:
    handler: src/getDataset.default
    timeout: 900
    memorySize: 10240
    events:
      - http:
          path: dataset/{protocol}
          method: get
  simpleDataset:
    handler: src/getSimpleChainDataset.default
    timeout: 900
    memorySize: 3000
    events:
      - http:
          path: simpleChainDataset/{chain}
          method: get
  config:
    handler: src/getConfig.default
    timeout: 10
    events:
      - http:
          path: config
          method: get
  storeProtocols:
    handler: src/storeGetProtocols.default
    timeout: 60
    memorySize: 3000
    events:
      - schedule: cron(20 * * * ? *)
  storeCharts:
    handler: src/storeGetCharts.default
    timeout: 60
    memorySize: 2000
    events:
      - schedule: cron(20 * * * ? *)
  hourly:
    handler: src/getHourlyData.default
    memorySize: 2000
    events:
      - http:
          path: hourly/{protocol}
          method: get
  corsPreflight:
    handler: src/corsPreflight.default
    events:
      - http:
          path: /{params+}
          method: options
  storeTvlInterval:
    handler: src/storeTvlInterval.default
    timeout: 900
    memorySize: 512
  triggerStoreTvls:
    handler: src/triggerStoreTvls.default
    timeout: 900
    events:
      - schedule: cron(0 * * * ? *)
  storeDataset:
    handler: src/storeCsvDataset.default
    timeout: 900
    memorySize: 10240
    events:
      - schedule: rate(1 day)
  notifyOutdated:
    handler: src/notifyOutdated.default
    timeout: 60
    events:
      - schedule: rate(3 hours)
  fetchCoingeckoData:
    handler: src/fetchCoingeckoData.default
    timeout: 900
  triggerFetchCoingeckoData:
    handler: src/triggerFetchCoingeckoData.default
    events:
      - schedule: cron(50 * * * ? *)
  sendDiscordMessage:
    handler: src/sendDiscordMessage.default
    timeout: 900

resources:
  # CORS for api gateway errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # Cloudfront API distribution
  - ${file(resources/api-cloudfront-distribution.yml)}

plugins:
  - serverless-webpack-fixed
  - serverless-offline
  - serverless-prune-plugin
